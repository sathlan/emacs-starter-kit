#+TITLE: Starter Kit Org
#+OPTIONS: toc:nil num:nil ^:nil

This is part of the [[file:starter-kit.org][Emacs Starter Kit]].

* Starter Kit Org
Configuration for the eminently useful [[http://orgmode.org/][Org Mode]].

Org-mode is for keeping notes, maintaining ToDo lists, doing project
planning, and authoring with a fast and effective plain-text system.
Org Mode can be used as a very simple folding outliner or as a complex
GTD system or tool for reproducible research and literate programming.

For more information on org-mode check out [[http://orgmode.org/worg/][worg]], a large Org-mode wiki
which is also *implemented using* Org-mode and [[http://git-scm.com/][git]].

** Org-Mode Hook
The latest version of yasnippets doesn't play well with Org-mode, the
following function allows these two to play nicely together
#+begin_src emacs-lisp
  (defun yas/org-very-safe-expand ()
    (let ((yas/fallback-behavior 'return-nil)) (yas/expand)))
#+end_src

#+begin_src emacs-lisp
  (add-hook 'org-mode-hook
            (lambda ()
              (local-set-key "\M-\C-n" 'outline-next-visible-heading)
              (local-set-key "\M-\C-p" 'outline-previous-visible-heading)
              (local-set-key "\M-\C-u" 'outline-up-heading)
              ;; table
              (local-set-key "\M-\C-w" 'org-table-copy-region)
              (local-set-key "\M-\C-y" 'org-table-paste-rectangle)
              (local-set-key "\M-\C-l" 'org-table-sort-lines)
              ;; display images
              (local-set-key "\M-I" 'org-toggle-iimage-in-org)
              ;; yasnippet (using the new org-cycle hooks)
              (make-variable-buffer-local 'yas/trigger-key)
              (setq yas/trigger-key [tab])
              (add-to-list 'org-tab-first-hook 'yas/org-very-safe-expand)
              (define-key yas/keymap [tab] 'yas/next-field)
              ))
#+end_src

And I want the =org-mark-ring-goto= function available even with the
=yas/snippet= module
#+begin_src emacs-lisp
  (eval-after-load "org"
    '(org-defkey org-mode-map "\C-c\C-x&" 'org-mark-ring-goto))
#+end_src

** Load up the Library of Babel
The library of babel contains makes many useful functions available
for use by code blocks in *any* emacs file.  See the actual
[[file:src/org/contrib/babel/library-of-babel.org][library-of-babel.org]] file for information on the functions, and see
[[http://orgmode.org/worg/org-contrib/babel/intro.php#library-of-babel][worg:library-of-babel]] for more usage information.
#+begin_src emacs-lisp
  (org-babel-lob-ingest
   (expand-file-name "library-of-babel.org" 
                     (expand-file-name
                      "babel"
                      (expand-file-name
                       "contrib"
                       (expand-file-name
                        "org"
                        (expand-file-name "src" dotfiles-dir))))))
#+end_src

** Starter Kit Documentation
This code defines the =starter-kit-project= which is used to publish
the documentation for the Starter Kit to html.

#+begin_src emacs-lisp :results silent
  (unless (boundp 'org-publish-project-alist)
    (setq org-publish-project-alist nil))
  (let ((this-dir (file-name-directory (or load-file-name buffer-file-name))))
    (add-to-list 'org-publish-project-alist
                 `("starter-kit-documentation"
                   :base-directory ,this-dir
                   :base-extension "org"
                   :style "<link rel=\"stylesheet\" href=\"emacs.css\" type=\"text/css\"/>"
                   :publishing-directory ,this-dir
                   :index-filename "starter-kit.org"
                   :auto-postamble nil)))
#+end_src

** Make =grep= works as intended
In folded =org= buffer, the =*grep*= link are useless.  This make it
visible before editing:

#+begin_src emacs-lisp
  (add-hook 'next-error-hook (lambda () (visible-mode 1)))
#+end_src 

Then we deactivate it by advising the org-cycle function:
#+begin_src emacs-lisp
  (defadvice org-cycle (before ch/make-it-cycle ())
    "Make sure visible-mode is off before trying to cycle."
    (visible-mode -1))
  (ad-activate 'org-cycle)
#+end_src

** Some shortcut
*** Insert properties
#+begin_src emacs-lisp
  (defun ch:set-blocker
    (org-entry-put (point) "BLOCKER"))
#+end_src
** Load path
The =contrib/lisp= directory is missing.
#+begin_src emacs-lisp
  (add-to-list 
   'load-path
   (expand-file-name 
    "lisp"
    (expand-file-name
     "contrib"
     (expand-file-name 
      "org"
      (expand-file-name "src" dotfiles-dir)))))
#+end_src

** The main setup
This is largely inspired from [[http://doc.norang.ca/org-mode.html][Org Mode - Organize Your Life In Plain
Text!]]. Thank to him, great work.

#+begin_src emacs-lisp -n
  ;; Setup for org-mode
  (add-to-list 'auto-mode-alist '("\\.\\(org\\|org_archive\\|txt\\)$" . org-mode))
  ;;
  ;; Standard key bindings
  (global-set-key "\C-cl" 'org-store-link)
  (global-set-key "\C-ca" 'org-agenda)
  (global-set-key "\C-cb" 'org-iswitchb)
  
  (setq org-directory "~/org/")
  
  ;; Ask for effort estimate.
  (add-hook 'org-clock-in-prepare-hook
            'ch:org-mode-ask-effort)
  
  (defun ch:org-mode-ask-effort ()
    "Ask for an effort estimate when clocking in."
    (unless (org-entry-get (point) "Effort")
      (let ((effort
             (completing-read
              "Effort: "
              (org-entry-get-multivalued-property (point) "Effort"))))
        (unless (equal effort "")
          (org-set-property "Effort" effort)))))
  
  
  ;; orgstruct++-mode is enabled in Gnus message buffers to aid in
  ;; creating structured email messages.
  (defun ch:message-mode-hook ()
    "My personnal message mode adjustement"
    (orgstruct++-mode)
    (setq fill-column 72)
    (flyspell-mode 1)
    (turn-on-auto-fill))
  (add-hook 'message-mode-hook 'ch:message-mode-hook)
  
  ;; Make TAB the yas trigger key in the org-mode-hook and turn on
  ;; flyspell mode
  (defun ch:org-mode-hook ()
    "My personnal org mode adjustements"
    (flyspell-mode 1))
  
  ;; Files participating to the agenda add with C-c [
  (setq org-agenda-files
        '(
          "~/org/study.org"
          "~/org/work.org"
          "~/org/refile.org"
          "~/org/administration.org"
          "~/org/perso.org"
          "~/org/emacs.org"
          "~/org/TeX.org"
          "~/org/programmation.org"
          ))
  
  (setq org-todo-keywords 
        (quote ((sequence "TODO(t)" "STARTED(s!)" "|" "DONE(d!/!)")
                (sequence "WAITING(w@/!)" "SOMEDAY(S!)" "OPEN(O@)" "|" 
                          "CANCELLED(c@/!)")
                (sequence "BUG(b)" "REPORTED(r)" "PATCH(p)" "VERIFIED(v)" "|"
                          "FIXED(f)"))))
  
  (setq org-use-fast-todo-selection t)
  (setq org-treat-S-cursor-todo-selection-as-state-change nil)
  
  (setq org-todo-state-tags-triggers
        (quote (("CANCELLED" ("CANCELLED" . t))
                ("WAITING" ("WAITING" . t) ("NEXT"))
                ("SOMEDAY" ("WAITING" . t))
                (done ("NEXT") ("WAITING"))
                ("TODO" ("WAITING") ("CANCELLED"))
                ("STARTED" ("WAITING") ("NEXT" . t))
                ("BUG" ("WAITING") ("CANCELLED") ("NEXT" . t))
                ("REPORTED" ("NEXT") ("WAITING" . t))
                ("PATCH" ("WAITING") ("NEXT" . t))
                ("VERIFIED" ("WAITING" . t) ("NEXT")))))
  
  ;; Remember
  (setq org-default-notes-file "~/org/refile.org")
  ;;;  Load Org Remember Stuff
  (require 'remember)
  (org-remember-insinuate)
  
  ;; listing for latex export
  (require 'org-latex)
  (add-to-list 'org-export-latex-packages-alist '("" "listings"))
  (add-to-list 'org-export-latex-packages-alist '("" "color"))
  (add-to-list 'org-export-latex-packages-alist '("" "upquote")) ;to force Latex not substitute ' by `
  (setq org-export-latex-listings t)
  ;; Start clock if a remember buffer includes :CLOCK-IN:
  (add-hook 'remember-mode-hook 'my-start-clock-if-needed 'append)
  
  (defun my-start-clock-if-needed ()
    (save-excursion
      (goto-char (point-min))
      (when (re-search-forward " *:CLOCK-IN: *" nil t)
        (replace-match "")
        (org-clock-in))))
  
  (define-key global-map "\C-cr" 'org-remember)
  
  ;; Keep clocks running
  (setq org-remember-clock-out-on-exit nil)
  
  ;; C-c C-c stores the note immediately
  (setq org-remember-store-without-prompt t)
  
  ;; I don't use this -- but set it in case I forget to specify a
  ;; location in a future template
  (setq org-remember-default-headline "Tasks")
  
  ;; To make beamer works
  (require 'org-latex)
  
  ;; Remember templates
  (setq org-remember-templates
        '(
          ("TradeXpress" ?x
           "\n** TODO [#%^{Priority: |C|B|A}] %^{Title: |%:subject} [[elisp:(ch:org-update-ext-base)][X]]\n   SCHEDULED: %^T\n   :PROPERTIES:\n   :CREATED: %T\n   :CORP:%^{Company :}\n   :WWW: %c\n   :WHO: %:fromaddress\n   :DESCRIPTION: %^{Title: |%:subject}\n   :MAIL: %a\n   :BASE: %^{Base :}\n   :ASA: %^{ASA :}\n   :END:\n\n%i%?\n"
           "~/org/work.org"
           "TÃ¢ches")
          ("mail" ?m
           "\n** %^{Title: |%:subject}\n   :PROPERTIES:\n   :CREATED: %T\n   :WHO: %:fromaddress\n   :MAIL: %a\n   :END:\n\n%i%?\n")
          ("web" ?w
           "\n** %^{Title |%:url}\n   :PROPERTIES:\n   :CREATED: %T\n   :WWW: %c\n   :END:\n\n%i%?\n" nil "Notes")
          ("todo"
           ?t "* TODO %?
  %u
  %a" nil bottom nil)
          ("note" ?n "* %?                                        :NOTE:
  %u
  %a" nil bottom nil)
          ("phone" ?p "* PHONE %:name - %:company -                :PHONE:
  Contact Info: %a
  %u
  :CLOCK-IN:
  %?" nil bottom nil)))
  
  ;; Remember template are obsoletes
  (setq org-capture-templates
        (quote
         (("w"
           "WWW"
           entry
           (file+headline "~/org/refile.org" "Notes")
           "* %^{Title | %:description}           :web:\n   :PROPERTIES:\n   :CREATED: %T\n   :WWW: %c\n   :END:\n\n  %i  %?\n"
           :empty-lines 1)
          )))
  
  ; Get org-protocol in
  (require 'org-protocol)
  
  ; Use IDO for target completion : WARN doesn't work with anything: *ERROR*: Capture abort: (wrong-type-argument window-live-p nil)
  ; (setq org-completion-use-ido t)
  (defalias 'org-capture-target 'org-capture-target-buffer
    "Seems to be forgotten in git version.")
  
  ; Targets include this file and any file contributing to the agenda - up to 5 levels deep
  (setq org-refile-targets (quote ((org-agenda-files :maxlevel . 5) (nil :maxlevel . 5))))
  
  ; Targets start with the file name - allows creating level 1 tasks
  (setq org-refile-use-outline-path (quote file))
  
  ; Targets complete in steps so we start with filename, TAB shows the next level of targets etc
  (setq org-outline-path-complete-in-steps t)
  
  ;;;; Agenda
  (setq org-agenda-custom-commands
        (quote (("s" "Started Tasks" todo "STARTED" ((org-agenda-todo-ignore-scheduled nil)
                                                     (org-agenda-todo-ignore-deadlines nil)
                                                     (org-agenda-todo-ignore-with-date nil)))
                ("W" agenda "" ((org-agenda-ndays 21)))
                ("w" "Tasks waiting on something" tags "WAITING/!" ((org-use-tag-inheritance nil)))
                ("r" "Refile New Notes and Tasks" tags "LEVEL=1+REFILE" ((org-agenda-todo-ignore-with-date nil)
                                                                         (org-agenda-todo-ignore-deadlines nil)
                                                                         (org-agenda-todo-ignore-scheduled nil)))
                ("N" "Notes" tags "NOTE" nil)
                ("n" "Next" tags "NEXT-WAITING-CANCELLED/!" nil)
                ("p" "Projects" tags-todo "LEVEL=2-NEXT-WAITING-CANCELLED/!-DONE" nil)
                ("A" "Tasks to be Archived" tags "LEVEL=2/DONE|CANCELLED" nil)
                ("S" "Study" tags "MIT|CNAM" nil)
                ("h" "Habits" tags "STYLE=\"habit\"" ((org-agenda-todo-ignore-with-date nil) (org-agenda-todo-ignore-scheduled nil) (org-agenda-todo-ignore-deadlines nil))))))
  
  ;;;; Clock
  ;;
  ;; Resume clocking tasks when emacs is restarted
  (org-clock-persistence-insinuate)
  ;; Yes it's long... but more is better ;)
  (setq org-clock-history-length 35)
  ;; Resume clocking task on clock-in if the clock is open
  (setq org-clock-in-resume t)
  ;; Change task state to STARTED when clocking in
  (setq org-clock-in-switch-to-state "STARTED")
  ;; Separate drawers for clocking and logs
  (setq org-drawers (quote ("PROPERTIES" "LOGBOOK" "CLOCK")))
  ;; Save clock data in the CLOCK drawer and state changes and notes in the LOGBOOK drawer
  (setq org-clock-into-drawer "CLOCK")
  ;; Sometimes I change tasks I'm clocking quickly - this removes
  ;; clocked tasks with 0:00 duration
  (setq org-clock-out-remove-zero-time-clocks t)
  ;; Don't clock out when moving task to a done state
  (setq org-clock-out-when-done t)
  ;; Save the running clock and all clock history when exiting Emacs,
  ;; load it on startup
  (setq org-clock-persist (quote history))
  ;; Explicitly tell what to do when idle clock.
  (setq org-clock-idle-time 10)
  
  ;; Agenda log mode items to display (clock time only by default)
  (setq org-agenda-log-mode-items (quote (clock)))
  
  ;; Agenda clock report parameters (no links, 2 levels deep)
  (setq org-agenda-clockreport-parameter-plist (quote (:link nil :maxlevel 2)))
  
  ; Set default column view headings: Task Effort Clock_Summary
  (setq org-columns-default-format
        "%80ITEM(Task) %10Effort(Effort){:} %10CLOCKSUM")
  
  ; global Effort estimate values
  (setq org-global-properties 
        (quote 
         (("Effort_ALL" . "0:10 0:30 1:00 2:00 3:00 4:00 5:00 6:00 8:00 16:00 24:00 32:00"))))
  
  ;;;; Tags
  ; Tags with fast selection keys
  (setq org-tag-persistent-alist (quote ((:startgroup)
                              ("@InTown" . ?t)
                              ("@Work" . ?w)
                              ("@Home" . ?h)
                              ("@out"  . ?o)
                              (:endgroup)
                              (:startgroup)
                              ("-Long" . ?L)
                              ("-Short" . ?O)
                              (:endgroup)
                              (:startgroup)
                              ("INTERN" . ?I)
                              ("MIT" . ?m)
                              ("CNAM" . ?c)
                              ("SUPPORT" . ?s)
                              ("CFT" . ?C)
                              ("AS2" . ?2)
                              ("WAN" . ?A)
                              ("DOC" . ?D)
                              ("PERSO" . ?P)
                              ("SRP" . ?S)
                              (:endgroup)
                              ("BUG" . ?B)
                              ("QUOTE" . ?q)
                              ("NEXT" . ?N)
                              ("WAITING" . ?W)
                              ("HOME" . ?H)
                              ("ORG" . ?O)
                              ("export" . ?e)
                              ("CANCELLED" . ?U))))
  
  ; Allow setting single tags without the menu
  ;(setq org-fast-tag-selection-single-key (quote expert))
  
  ; For tag searches ignore tasks with scheduled and deadline dates
  (setq org-agenda-tags-todo-honor-ignore-options t)
  
  (setq org-agenda-ndays 1)
  
  ;; Project definition and finding stuck projects 
  (setq org-stuck-projects 
        (quote
         ("LEVEL=2/!-DONE-CANCELLED-OPEN-SOMEDAY-WAITING" nil ("NEXT") "")))
  
  
  ;; Reminders 
  ; Erase all reminders and rebuilt reminders for today from the agenda
  (defun my-org-agenda-to-appt ()
    (interactive)
    (setq appt-time-msg-list nil)
    (org-agenda-to-appt))
  
  ; Rebuild the reminders everytime the agenda is displayed
  (add-hook 'org-finalize-agenda-hook 'my-org-agenda-to-appt)
  
  ; This is at the end of my .emacs - so appointments are set up when
  ; Emacs starts
  (my-org-agenda-to-appt)
  
  ; Activate appointments so we get notifications
  (appt-activate t)
  
  ; If we leave Emacs running overnight - reset the appointments one
  ; minute after midnight
  (run-at-time "24:01" nil 'my-org-agenda-to-appt)
  
  ;; Always hilight the current agenda line
  (add-hook 'org-agenda-mode-hook '(lambda () (hl-line-mode 1)))
  
  ;; Keep tasks with dates off the global todo lists
  (setq org-agenda-todo-ignore-with-date t)
  
  ;; Remove completed deadline tasks from the agenda view
  (setq org-agenda-skip-deadline-if-done t)
  
  ;; Remove completed scheduled tasks from the agenda view
  (setq org-agenda-skip-scheduled-if-done t)
  
  ;; Include agenda archive files when searching for things
  ;(setq org-agenda-text-search-extra-files (quote (agenda-archives)))
  
  ;; Show all future entries for repeating tasks
  (setq org-agenda-repeating-timestamp-show-all t)
  
  ;; Show all agenda dates - even if they are empty
  (setq org-agenda-show-all-dates t)
  
  ;; Sorting order for tasks on the agenda
  (setq org-agenda-sorting-strategy
        (quote ((agenda time-up priority-down effort-up category-up)
                (todo priority-down)
                (tags priority-down))))
  
  ;; Start the weekly agenda today
  (setq org-agenda-start-on-weekday nil)
  
  ;; Disable display of the time grid
  (setq org-agenda-time-grid
        (quote (nil "----------------"
                    (800 1000 1200 1400 1600 1800 2000))))
  
  (load "org-checklist")
  
  (setq org-enforce-todo-dependencies t)
  (setq org-hide-leading-stars nil)
  (setq org-odd-levels-only nil)
  (setq org-cycle-separator-lines 0)
  (setq org-blank-before-new-entry (quote ((heading)
                                           (plain-list-item))))
  (setq org-insert-heading-respect-content t)
  (setq org-reverse-note-order nil)
  
  (setq org-show-following-heading t)
  (setq org-show-hierarchy-above t)
  (setq org-show-siblings nil)
  
  (setq org-special-ctrl-a/e t)
  (setq org-special-ctrl-k t)
  (setq org-yank-adjusted-subtrees t)
  
  ;; Attachments
  (setq org-id-method (quote uuidgen))
  (setq org-deadline-warning-days 30)
  
  (setq org-link-frame-setup (quote ((vm . vm-visit-folder-other-frame)
                                     (gnus . gnus-other-frame)
                                     (file . find-file-other-window))))
  
  ;; Log
  (setq org-log-done (quote time))
  (setq org-log-into-drawer t)
  
  ;; Sound
  ;(setq org-clock-sound "/usr/local/lib/alert1.wav")
  (setq org-ditaa-jar-path "/usr/local/share/java/classes/ditaa.jar")
  
  (run-at-time "00:59" 3600 'org-save-all-org-buffers)
  
  ;; For algo preview in latex frag.  note we cannot use LATEX_HEADER
  ;; for fragment
  ;(add-to-list 'org-export-latex-packages-alist '("" . ("algorithmic")
  ;                                                "" . ("program")))
  (plist-put org-format-latex-options :scale 1.5)
  
  ;; Babel sub-mode
  (org-babel-do-load-languages
   'org-babel-load-languages
   '((R . t)
     (ditaa . t)
     (dot . t)
     (emacs-lisp . t)
     (gnuplot . t)
     (haskell . nil)
     (ocaml . nil)
     (python . t)
     (ruby . t)
     (screen . nil)
     (sh . t)
     (sql . nil)
     (sqlite . t)
     (css . t)
     (perl . t)
     (latex . t)))
  
  (require 'org-crypt)
  
  ;; Git file when changing of branche.
  (global-auto-revert-mode 1)
  
  ;; Speed commands.
  (setq org-use-speed-commands t)
#+end_src

** My Personal setup
Here, it's more mine.

*** Which file are concerned by org-mode
#+begin_src emacs-lisp
  (add-to-list 'auto-mode-alist '("README" . org-mode))
#+end_src

*** Make =flyspell= ignore org mode related text 
From [[http://www.emacswiki.org/cgi-bin/emacs-en/AutoDictionaryMode][Nikolaj Schumacher]].  To check the =face= property of a piece of
text, you can use =M-: (text-properties-at (point))=, or =M-:
(get-text-property (point) 'face)=.

#+begin_src emacs-lisp
  (setq ch/org-flyspell-p '(org-meta-line org-block org-link))
  (defun org-flyspell-predicate ()
    (let ((face (get-text-property (point) 'face)))
      (not (memq (if (listp face) (car face) face)
                 ch/org-flyspell-p))))
  (put 'org-mode 'flyspell-mode-predicate 'org-flyspell-predicate)
#+end_src

*** Some add on
#+begin_src emacs-lisp
  (require 'org-git-link)
#+end_src
*** When goto-line to a folded file it sucks
This is ugly but it's quick and better than the default.  Or maybe I
miss something?
#+begin_src emacs-lisp
  (defadvice goto-line (before  ch/show-all-ad)
    "Widen the buffer when goto-line wants it (and me)
  A bit too simple."
    (show-all))
  
  (ad-activate 'goto-line)
  
#+end_src

*** Fontify inline
Require 7.3

#+begin_src emacs-lisp
  (setq org-src-fontify-natively t)
#+end_src
*** Hack to make capture question works with anything
Without it I keep having:
#+results
: *ERROR*: Capture abort: (wrong-type-argument window-live-p nil)

#+begin_src emacs-lisp
  (defadvice org-completing-read-no-i (around ch/no-anything)
    "Make capture works with ANYTHING."
    (let ((ch/anything-use-original-function anything-use-original-function))
      (setq anything-use-original-function t)
      ad-do-it
      (setq anything-completing-read ch/anything-use-original-function)))
  (ad-activate 'org-completing-read-no-i)
#+end_src
*** Hack to make org-git-store-link work with org-bibtex-store-link
#+begin_src emacs-lisp
  (defadvice org-git-store-link (around ch/no-git-on-bibtex)
    "Make git-store-link works with bibtex-store-link."
    (let ((mode major-mode))
      (if (string= "bibtex-mode" mode) nil ad-do-it)))
  (ad-activate 'org-git-store-link)
  
#+end_src
*** Hack to deactivate org-git-store-link
Use a local variable in the buffer =git-no-store-hook=.
#+begin_src emacs-lisp
  (defadvice org-git-store-link (around ch/no-git-get-out)
    "Make git-store-link get out."
    (let ((git-no (ignore-errors (symbol-value 'git-no-store-hook)))) (if git-no nil ad-do-it)))
  (ad-activate 'org-git-store-link)
  
#+end_src
* The end
#+begin_src emacs-lisp
  (provide 'starter-kit-org)
#+end_src
